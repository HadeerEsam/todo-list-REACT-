{"version":3,"sources":["todo-form/addForm.js","todo-form/updateForm.js","tasks/tasks.js","App.js","reportWebVitals.js","index.js"],"names":["AddForm","props","onSubmit","submit","className","htmlFor","type","id","error","UpdateForm","placeholder","value","TasksTable","taskList","task","length","map","ele","i","name","status","toString","icon","faCheck","onClick","done","update","delete","App","useState","showError","updatedValue","showForm","setTask","console","log","e","preventDefault","tasks","isNaN","target","push","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAYeA,MAZf,SAAiBC,GACf,OACE,uBAAMC,SAAUD,EAAME,OAAQC,UAAU,YAAxC,UACE,sBAAKA,UAAU,OAAf,UACE,uBAAOC,QAAQ,YAAYD,UAAU,aAArC,8BACA,uBAAOE,KAAK,OAAOC,GAAG,YAAYH,UAAU,oBAE9C,mBAAGA,UAAU,yBAAb,SAAuCH,EAAMO,QAC7C,wBAASJ,UAAU,eAAnB,0BCIWK,MAZjB,SAAoBR,GAChB,OACE,uBAAMC,SAAUD,EAAME,OAAQC,UAAU,YAAxC,UACE,sBAAKA,UAAU,OAAf,UACE,uBAAOC,QAAQ,YAAYD,UAAU,aAArC,+BACA,uBAAOE,KAAK,OAAOC,GAAG,YAAYH,UAAU,eAAeM,YAAaT,EAAMU,WAEhF,mBAAGP,UAAU,yBAAb,SAAuCH,EAAMO,QAC7C,wBAAUJ,UAAU,eAApB,6B,cCsDOQ,MA5Df,SAAoBX,GAClB,IAAIY,EACJ,OAAIZ,EAAMa,KAAKD,SAASE,OAAS,GAC/BF,EAAWZ,EAAMa,KAAKD,SAASG,KAAI,SAACC,EAAKC,GACvC,OACE,sBAEEd,UAAU,iFAFZ,UAIE,gCACE,wCAAWa,EAAIE,QACf,0CACYF,EAAIG,OAAOC,YACL,IAAfJ,EAAIG,OACH,cAAC,IAAD,CAAiBhB,UAAU,oBAAoBkB,KAAMC,MACnD,WAGR,sBAAKnB,UAAU,gBAAf,WACkB,IAAfa,EAAIG,OACH,wBACEI,QAAS,WACPvB,EAAMwB,KAAKP,IAEbd,UAAU,6BAJZ,kBAQE,MACY,IAAfa,EAAIG,OACH,wBACEI,QAAS,WACPvB,EAAMyB,OAAOR,IAEfd,UAAU,8BAJZ,oBAQE,KACJ,wBACEoB,QAAS,WACPvB,EAAM0B,OAAOT,IAEfd,UAAU,8BAJZ,yBAjCGc,MA6CJ,8BAAML,KAGX,qBAAKT,UAAU,8DAAf,SACE,kDCsEOwB,MAxHf,WAAe,MAEWC,mBAAS,CAC/BhB,SAAU,GACViB,UAAW,KACXC,aAAc,GACdC,UAAU,IANC,mBAENlB,EAFM,KAEAmB,EAFA,KA8Fb,OACE,0BAAS7B,UAAU,sBAAnB,UAEE,oBAAIA,UAAU,2DAAd,wBAGC8B,QAAQC,IAAIrB,EAAKkB,WACC,IAAlBlB,EAAKkB,SACJ,cAAC,EAAD,CAAS7B,OA7FO,SAACiC,GACrBA,EAAEC,iBACF,IAAMC,EAAQxB,EAAKD,SACf0B,MAAMH,EAAEI,OAAO,GAAG7B,QACpB2B,EAAMG,KAAK,CACTtB,KAAMiB,EAAEI,OAAO,GAAG7B,MAClBS,QAAQ,IAEVa,EAAQ,CACNpB,SAAUyB,EACVR,UAAW,KACXC,aAAc,GACdC,UAAU,KAGZC,EAAQ,CACNpB,SAAUyB,EACVR,UAAW,yBACXC,aAAc,GACdC,UAAU,KA0EsBxB,MAAOM,EAAKgB,YAE5C,cAAC,EAAD,CACE3B,OAvCkB,SAACiC,GACzBA,EAAEC,iBACF,IAAMC,EAAQxB,EAAKD,SACf0B,MAAMH,EAAEI,OAAO,GAAG7B,QACpB2B,EAAMxB,EAAKP,IAAM,CACfY,KAAMiB,EAAEI,OAAO,GAAG7B,MAClBS,QAAQ,EACRW,aAAc,GACdC,UAAU,GAEZC,EAAQ,CACNpB,SAAUyB,EACVR,UAAW,KACXE,UAAU,EACVD,aAAc,GACdxB,GAAGO,EAAKP,MAGV0B,EAAQ,CACNpB,SAAUyB,EACVR,UAAW,yBACXC,aAAc,GACdC,UAAU,EACVzB,GAAGO,EAAKP,MAiBNC,MAAOM,EAAKgB,UACZnB,MAAOG,EAAKiB,eAGhB,cAAC,EAAD,CACEjB,KAAMA,EACNa,OApEe,SAACpB,GACpB,IAAM+B,EAAQxB,EAAKD,SACnByB,EAAMI,OAAOnC,EAAI,GACjB0B,EAAQ,CACNpB,SAAUyB,EACVP,aAAc,GACdC,UAAU,EACVF,UAAW,QA8DTL,KAhFa,SAAClB,GAClB,IAAM+B,EAAQxB,EAAKD,SACnByB,EAAM/B,GAAIa,QAAS,EACnBa,EAAQ,CACNpB,SAAUyB,EACVR,UAAW,KACXC,aAAc,GACdC,UAAU,KA0ERN,OA3De,SAACnB,GACpB,IAAM+B,EAAQxB,EAAKD,SACnBoB,EAAQ,CACNpB,SAAUyB,EACVR,UAAW,KACXC,aAAcO,EAAM/B,GAAIY,KACxBa,UAAU,EACVzB,GAAIA,WCzDKoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fe36e595.chunk.js","sourcesContent":["function AddForm(props) {\r\n  return (\r\n    <form onSubmit={props.submit} className=\"w-75 mb-5\">\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"taskInput\" className=\"form-label\">Enter your task:</label>\r\n        <input type=\"text\" id=\"taskInput\" className=\"form-control\"/>\r\n      </div>\r\n      <p className=\"text-danger text-small\">{props.error}</p>\r\n      <button  className=\"btn btn-info\">Add Task</button>\r\n    </form>\r\n  );\r\n}\r\nexport default AddForm;\r\n","function UpdateForm(props) {\r\n    return (\r\n      <form onSubmit={props.submit} className=\"w-75 mb-5\">\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"taskInput\" className=\"form-label\">Update your task:</label>\r\n          <input type=\"text\" id=\"taskInput\" className=\"form-control\" placeholder={props.value}/>\r\n        </div>\r\n        <p className=\"text-danger text-small\">{props.error}</p>\r\n        <button   className=\"btn btn-info\">Update Task</button>\r\n      </form>\r\n    );\r\n  }\r\n  export default UpdateForm;","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\r\nfunction TasksTable(props) {\r\n  let taskList;\r\n  if (props.task.taskList.length > 0) {\r\n    taskList = props.task.taskList.map((ele, i) => {\r\n      return (\r\n        <div\r\n          key={i}\r\n          className=\"d-flex flex-column flex-md-row justify-content-between mb-4 border rounded p-4\"\r\n        >\r\n          <div>\r\n            <p>Task : {ele.name}</p>\r\n            <p>\r\n              Status : {ele.status.toString()}\r\n              {ele.status === true ? (\r\n                <FontAwesomeIcon className=\"text-success ml-2\" icon={faCheck} />\r\n              ) : null}\r\n            </p>\r\n          </div>\r\n          <div className=\"  text-right \">\r\n            {ele.status === false ? (\r\n              <button\r\n                onClick={() => {\r\n                  props.done(i);\r\n                }}\r\n                className=\"btn btn-success mr-1  mb-3\"\r\n              >\r\n                Done\r\n              </button>\r\n            ) : null}\r\n            {ele.status === false ? (\r\n              <button\r\n                onClick={() => {\r\n                  props.update(i);\r\n                }}\r\n                className=\"btn   btn-warning mr-1 mb-3\"\r\n              >\r\n                Update\r\n              </button>\r\n            ) : null}\r\n            <button\r\n              onClick={() => {\r\n                props.delete(i);\r\n              }}\r\n              className=\"btn  btn-danger  mb-3 mr-1 \"\r\n            >\r\n              Delete\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n    return <div>{taskList}</div>;\r\n  } else {\r\n    return (\r\n      <div className=\"border rounded p-4 text-center text-danger font-weight-bold\">\r\n        <p>No Tasks Found</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default TasksTable;\r\n","import React, { useState } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import {Button} from 'react-bootstrap';\r\nimport AddForm from \"./todo-form/addForm\";\r\nimport UpdateForm from \"./todo-form/updateForm\";\r\nimport TasksTable from \"./tasks/tasks\";\r\n\r\nfunction App() {\r\n  // set state\r\n  const [task, setTask] = useState({\r\n    taskList: [],\r\n    showError: null,\r\n    updatedValue: \"\",\r\n    showForm: true,\r\n  });\r\n  // add new task\r\n  const handleAddTask = (e) => {\r\n    e.preventDefault();\r\n    const tasks = task.taskList;\r\n    if (isNaN(e.target[0].value)) {\r\n      tasks.push({\r\n        name: e.target[0].value,\r\n        status: false,\r\n      });\r\n      setTask({\r\n        taskList: tasks,\r\n        showError: null,\r\n        updatedValue: \"\",\r\n        showForm: true,\r\n      });\r\n    } else {\r\n      setTask({\r\n        taskList: tasks,\r\n        showError: \"Only letters allowed!!\",\r\n        updatedValue: \"\",\r\n        showForm: true,\r\n      });\r\n    }\r\n  };\r\n  // handle done tasks\r\n  const handleDone = (id) => {\r\n    const tasks = task.taskList;\r\n    tasks[id].status = true;\r\n    setTask({\r\n      taskList: tasks,\r\n      showError: null,\r\n      updatedValue: \"\",\r\n      showForm: true,\r\n    });\r\n  };\r\n  // delete task from the list\r\n  const handleDelete = (id) => {\r\n    const tasks = task.taskList;\r\n    tasks.splice(id, 1);\r\n    setTask({\r\n      taskList: tasks,\r\n      updatedValue: \"\",\r\n      showForm: true,\r\n      showError: null,\r\n    });\r\n  };\r\n  // get id of updated task\r\n  const handleUpdate = (id) => {\r\n    const tasks = task.taskList;\r\n    setTask({\r\n      taskList: tasks,\r\n      showError: null,\r\n      updatedValue: tasks[id].name,\r\n      showForm: false,\r\n      id: id\r\n    });\r\n  };\r\n  // update choosen task\r\n  const handleUpdatedTask = (e) => {\r\n    e.preventDefault();\r\n    const tasks = task.taskList;\r\n    if (isNaN(e.target[0].value)) {\r\n      tasks[task.id] = {\r\n        name: e.target[0].value,\r\n        status: false,\r\n        updatedValue: \"\",\r\n        showForm: true,\r\n      };\r\n      setTask({\r\n        taskList: tasks,\r\n        showError: null,\r\n        showForm: true,\r\n        updatedValue: \"\",\r\n        id:task.id\r\n      });\r\n    } else {\r\n      setTask({\r\n        taskList: tasks,\r\n        showError: \"Only letters allowed!!\",\r\n        updatedValue: \"\",\r\n        showForm: false,\r\n        id:task.id\r\n      });\r\n    }\r\n  };\r\n \r\n  return (\r\n    <section className=\"App  container py-5\">\r\n      {/* <Button variant=\"success\">Success</Button> */}\r\n      <h1 className=\"text-info text-center font-weight-bold text-lg-left mb-5\">\r\n        To Do List\r\n      </h1>\r\n      {console.log(task.showForm)}\r\n      {task.showForm === true ? (\r\n        <AddForm submit={handleAddTask} error={task.showError} />\r\n      ) : (\r\n        <UpdateForm\r\n          submit={handleUpdatedTask}\r\n          error={task.showError}\r\n          value={task.updatedValue}\r\n        />\r\n      )}\r\n      <TasksTable\r\n        task={task}\r\n        delete={handleDelete}\r\n        done={handleDone}\r\n        update={handleUpdate}\r\n      />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}